package database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;

public class DataConnection {

    protected static Connection connection;

    private static DataConnection instance;
    private String userName;
    private String password;
    private String url;
    private String jdbcDriver;
    private String db = "thotel";

    private PreparedStatement ps;

    private DataConnection() {
        userName = "postgres";
        password = "postgres";
        url = "jdbc:postgresql://localhost:5432/thotel";
        jdbcDriver = "org.postgresql.Driver";
        setupDatabase();
    }

    public Connection getConnection() {
        try {
            if (connection == null) {
                Class.forName(jdbcDriver);
                connection = DriverManager.getConnection(url, userName, password);
            } else if (connection.isClosed()) {
                connection = null;
                return getConnection();
            }
        } catch (ClassNotFoundException e) {
            System.out.println(e.getMessage());
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        ps = null;

        return connection;
    }

    public void closeConnection() {
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }
    }

    public void setDb(String database) {
        setUrl(database);
        db = database;
    }

    public String getDb() {
        return db;
    }

    public ResultSet sql(String script) {
        try {
            ps = this.getConnection().prepareStatement(script);
            ResultSet answer = ps.executeQuery();
            this.closeConnection();
            return answer;
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return null;
    }

    public void executeUpdate(String script) {
        try {
            this.getConnection().prepareStatement(script).executeUpdate();
            this.closeConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void setUrl(String database){
        if((database != null) && (!database.equals("")))
            url = "jdbc:postgresql://localhost:5432/" + database;
    }

    public static DataConnection getInstance() {
        if (instance == null) {
            instance = new DataConnection();
        }
        return instance;
    }

    private void setupDatabase() {
        createTables();
        populateCategoryTable();
        populateClientTable();
        populateRoomTable();
        populateOccupationTable();
        populateReservationTable();
    }

    private void createTables() {
        executeUpdate("DROP TABLE IF EXISTS category, client, occupation, reservation, room;");
        executeUpdate("CREATE TABLE IF NOT EXISTS category (\n" +
                "    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),\n" +
                "    name VARCHAR NOT NULL,\n" +
                "    daily_rate real NOT NULL,\n" +
                "    capacity integer NOT NULL,\n" +
                "    extra_bed boolean NOT NULL DEFAULT true,\n" +
                "    extra_bed_fee real NOT NULL DEFAULT 0.3,\n" +
                "    CONSTRAINT category_pkey PRIMARY KEY (id),\n" +
                "    CONSTRAINT category_name_key UNIQUE (name)\n" +
                ");");
        executeUpdate("CREATE TABLE IF NOT EXISTS client (\n" +
                "    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 101 MINVALUE 101 MAXVALUE 2147483647 CACHE 1 ),\n" +
                "    name VARCHAR NOT NULL,\n" +
                "    phone VARCHAR(20) NOT NULL,\n" +
                "    CONSTRAINT client_pkey PRIMARY KEY (id)\n" +
                ");");
        executeUpdate("CREATE TABLE IF NOT EXISTS room (\n" +
                "    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),\n" +
                "    category_id integer NOT NULL,\n" +
                "    CONSTRAINT room_pkey PRIMARY KEY (id),\n" +
                "    CONSTRAINT romm_category_id_fkey FOREIGN KEY (category_id)\n" +
                "        REFERENCES category (id) MATCH SIMPLE\n" +
                "        ON UPDATE NO ACTION\n" +
                "        ON DELETE NO ACTION\n" +
                ");");
        executeUpdate("CREATE TABLE IF NOT EXISTS occupation (\n" +
                "    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1),\n" +
                "    client_id integer NOT NULL,\n" +
                "    room_id integer NOT NULL,\n" +
                "    guests integer NOT NULL,\n" +
                "    checkin_date date NOT NULL,\n" +
                "    expected_checkout_date date NOT NULL,\n" +
                "    checkout_date date,\n" +
                "    total_amount real,\n" +
                "    CONSTRAINT occupation_pkey PRIMARY KEY (id),\n" +
                "    CONSTRAINT occupation_client_id_fkey FOREIGN KEY (client_id)\n" +
                "        REFERENCES client (id) MATCH SIMPLE\n" +
                "        ON UPDATE NO ACTION\n" +
                "        ON DELETE NO ACTION,\n" +
                "    CONSTRAINT occupation_room_id_fkey FOREIGN KEY (room_id)\n" +
                "        REFERENCES room (id) MATCH SIMPLE\n" +
                "        ON UPDATE NO ACTION\n" +
                "        ON DELETE NO ACTION\n" +
                ");");
        executeUpdate("CREATE TABLE IF NOT EXISTS reservation (\n" +
                "    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1),\n" +
                "    client_id integer NOT NULL,\n" +
                "    room_id integer NOT NULL,\n" +
                "    guests integer NOT NULL,\n" +
                "    expected_checkin_date date NOT NULL,\n" +
                "    expected_checkout_date date NOT NULL,\n" +
                "    CONSTRAINT reservation_pkey PRIMARY KEY (id),\n" +
                "    CONSTRAINT reservation_client_id_fkey FOREIGN KEY (client_id)\n" +
                "        REFERENCES client (id) MATCH SIMPLE\n" +
                "        ON UPDATE NO ACTION\n" +
                "        ON DELETE NO ACTION,\n" +
                "    CONSTRAINT reservation_room_id_fkey FOREIGN KEY (room_id)\n" +
                "        REFERENCES room (id) MATCH SIMPLE\n" +
                "        ON UPDATE NO ACTION\n" +
                "        ON DELETE NO ACTION\n" +
                ");");
    }

    private void populateCategoryTable() {
        executeUpdate("INSERT INTO category (name, daily_rate, capacity) VALUES ('Standard', 268, 2);");
        executeUpdate("INSERT INTO category (name, daily_rate, capacity) VALUES ('Apartamento Vista Bosque', 315, 4);");
        executeUpdate("INSERT INTO category (name, daily_rate, capacity) VALUES ('Apartamento Vista Vale', 353, 4);");
        executeUpdate("INSERT INTO category (name, daily_rate, capacity) VALUES ('Suíte', 498, 2);");
    }

    private void populateClientTable() {
        executeUpdate("INSERT INTO client (name, phone) VALUES ('Reginaldo Farias', '(51) 96186617');");
        executeUpdate("INSERT INTO client (name, phone) VALUES ('Samanta Souza', '(21) 81534599');");
        executeUpdate("INSERT INTO client (name, phone) VALUES ('Augusto Santos', '(81) 92097644');");
        executeUpdate("INSERT INTO client (name, phone) VALUES ('Cláudio Silva', '(48) 99764831');");
        executeUpdate("INSERT INTO client (name, phone) VALUES ('Mariano Santana', '(11) 94523456');");
    }

    private void populateOccupationTable() {
        Date currentDate = new Date();
        LocalDateTime localDateTime = currentDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();

        Date checkinDate = currentDate;
        Date checkoutDate = Date.from(localDateTime.plusDays(2).atZone(ZoneId.systemDefault()).toInstant());
        executeUpdate("INSERT INTO occupation (client_id, room_id, guests, checkin_date, expected_checkout_date) \n" +
                "\tVALUES (104, 1, 3, '"+new SimpleDateFormat("yyyy-MM-dd").format(checkinDate)+
                "', '"+new SimpleDateFormat("yyyy-MM-dd").format(checkoutDate)+"');");

        checkinDate = Date.from(localDateTime.minusDays(1).atZone(ZoneId.systemDefault()).toInstant());
        checkoutDate = Date.from(localDateTime.plusDays(3).atZone(ZoneId.systemDefault()).toInstant());
        executeUpdate("INSERT INTO occupation (client_id, room_id, guests, checkin_date, expected_checkout_date) \n" +
                "\tVALUES (101, 4, 4, '"+new SimpleDateFormat("yyyy-MM-dd").format(checkinDate)+
                "', '"+new SimpleDateFormat("yyyy-MM-dd").format(checkoutDate)+"');");
    }

    private void populateReservationTable() {
        Date currentDate = new Date();
        LocalDateTime localDateTime = currentDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();

        Date checkinDate = Date.from(localDateTime.plusDays(0).atZone(ZoneId.systemDefault()).toInstant());
        Date checkoutDate = Date.from(localDateTime.plusDays(7).atZone(ZoneId.systemDefault()).toInstant());
        executeUpdate("INSERT INTO reservation (client_id, room_id, guests, expected_checkin_date, expected_checkout_date)\n" +
                "\tVALUES (103, 10, 2, '"+new SimpleDateFormat("yyyy-MM-dd").format(checkinDate)+
                "', '"+new SimpleDateFormat("yyyy-MM-dd").format(checkoutDate)+"');");
    }

    private void populateRoomTable() {
        executeUpdate("INSERT INTO room (category_id) VALUES (1);");
        executeUpdate("INSERT INTO room (category_id) VALUES (1);");
        executeUpdate("INSERT INTO room (category_id) VALUES (2);");
        executeUpdate("INSERT INTO room (category_id) VALUES (2);");
        executeUpdate("INSERT INTO room (category_id) VALUES (2);");
        executeUpdate("INSERT INTO room (category_id) VALUES (3);");
        executeUpdate("INSERT INTO room (category_id) VALUES (3);");
        executeUpdate("INSERT INTO room (category_id) VALUES (3);");
        executeUpdate("INSERT INTO room (category_id) VALUES (4);");
        executeUpdate("INSERT INTO room (category_id) VALUES (4);");
    }
}
